using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;



/*
 * 메서드를 호출하면 제어가 메서드가 선언된 곳으로 이동하며, 메서드를 처리한 다음에 다시 호출한 곳으로 제어가 되돌아 갑니다. 
 * 메서드를 호출할 때 매개 변수를 넘겨줄 수 있으며, 메서드는 매개 변수를 받아서 처리하고, 처리한 결과값을 호출한 곳으로 반환합니다.
 * 
 * 메서드는 다음과 같이 기능에 따라서 만드는 형태가 다릅니다.
 * (1) 메서드를 호출할 때 매개변수를 넘겨줄 수 있다.
 * (2) 매개변수 없이 메서드를 호출할 수 있다.
 * (3) 처리결과를 반환하지 않는다.
 * (4) 처리결과를 1개 반환한다.
 * (5) 처리결과를 2개 이상 반환한다.
 * 
 * 메서드의 반환형은 호출한 곳으로 제어가 반환될 때(되돌아 갈 때) 반환되는 값의 자료형식을 말합니다. 
 * 메서드의 호출한 쪽의 매개변수를 실 매개변수(actual argument)라 부르며, 메서드가 선언된 쪽의 매개변수를 형식 매개변수(formal parameter)라 부릅니다.
 * 실 매개변수와 형식 매개변수는 개수와 자료형식이 일치하여야 합니다. 
 * 
 * void: 반환 형식 
 * 메서드의 반환형식에 void는 반환값이 없음을 나타냅니다. 
 * 즉, 메서드를 호출한 곳으로 결과값을 반환하지 않는 메서드임을 나타냅니다.
 * 고로 호출한 메인함수에서는 그냥 호출만 할뿐이지 받을 값이 없기때문에, 주로 출력을 할때 자주 쓰입니다.
 * 
 * return: 제어 또는 결과값 반환하기
 * return 구문은 제어를 호출한 곳으로 되돌리며, 다음과 같은 형식으로 사용됩니다. 
 * return;  또는 return 값;
 * 메서드 선언에서 호출한 곳으로 제어가 반환되는 경우는 2가지 입니다.
 * (1) return을 만나면 즉시 반환됩니다
 * (2) return이 없으면, 메서드 끝까지 처리하고 반환됩 니다. 이 경우는 “return 값” 형식이 아니기 때문에 메서드의 반환형은 “void”입니다.
 * (3) 메서드의 “반환 형식”과 “rerurn 값” 형식의 자료형이 일치해야 합니다.
 * 
 * 주의할 점은 return은 값을 반환하지 않거나 값을 1개만 반환할 수 있습니다. 즉, 값을 2개 반환하기 위해서 다음과 같이 사용할 수 없습니다. ​
 * (1) return  값1, 값2;              // 오류: 값을 2개이상 사용할 수 없습니다.
 * (2) return 값1; return 값2;        // return 문을 계속 2개 사용하면 두 번째 return은 실행되지 않습니다.

 * return문을 계속해서 2개 사용할 경우, 첫 번째 문장에서 제어가 반환되기 때문에 다음에 이어지는 return문은 실행되지 않습니다. ..
 * 결과를 2개 이상 반환할 때는 return이 아닌 다른 방법을 사용해야 합니다.
 * 그래서 결과를 2개 이상 반환하기 위해서는 다른 방법을 사용해야합니다. 이런 이유 때문에 메서드를 만드는 방법이 조금 더 복잡 해집니다. 
 * 
 * 
 * 












.






      






 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 */



namespace book.Concept
{
    internal class Method
    {
        
        


    }
}
